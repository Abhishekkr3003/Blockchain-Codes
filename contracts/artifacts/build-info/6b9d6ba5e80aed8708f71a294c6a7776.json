{
	"id": "6b9d6ba5e80aed8708f71a294c6a7776",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.5.17",
	"solcLongVersion": "0.5.17+commit.d19bba13",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/22.sol": {
				"content": "pragma solidity ^0.5.0;\r\n\r\ncontract Sharer {\r\n    function sendHalf(address payable addr) public payable returns (uint balance) {\r\n        assert(msg.value % 2 == 0); //Require() can have an optional message string\r\n        uint balanceBeforeTransfer = address(this).balance;\r\n        (bool success, ) = addr.call.value(msg.value / 2)(\"\");\r\n        require(success);\r\n        // Since we reverted if the transfer failed, there should be\r\n        // no way for us to still have half of the money.\r\n       assert(address(this).balance == balanceBeforeTransfer - msg.value / 2); // used for internal error checking\r\n        // assert(address(this).balance==200);\r\n        return address(this).balance;\r\n    }\r\n}"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"contracts/22.sol": {
				"Sharer": {
					"abi": [
						{
							"constant": false,
							"inputs": [
								{
									"internalType": "address payable",
									"name": "addr",
									"type": "address"
								}
							],
							"name": "sendHalf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"payable": true,
							"stateMutability": "payable",
							"type": "function"
						}
					],
					"devdoc": {
						"methods": {}
					},
					"evm": {
						"assembly": "    /* \"contracts/22.sol\":27:708  contract Sharer {\r... */\n  mstore(0x40, 0x80)\n  callvalue\n    /* \"--CODEGEN--\":8:17   */\n  dup1\n    /* \"--CODEGEN--\":5:7   */\n  iszero\n  tag_1\n  jumpi\n    /* \"--CODEGEN--\":30:31   */\n  0x00\n    /* \"--CODEGEN--\":27:28   */\n  dup1\n    /* \"--CODEGEN--\":20:32   */\n  revert\n    /* \"--CODEGEN--\":5:7   */\ntag_1:\n    /* \"contracts/22.sol\":27:708  contract Sharer {\r... */\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/22.sol\":27:708  contract Sharer {\r... */\n      mstore(0x40, 0x80)\n      jumpi(tag_1, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x75949c13\n      eq\n      tag_2\n      jumpi\n    tag_1:\n      0x00\n      dup1\n      revert\n        /* \"contracts/22.sol\":50:705  function sendHalf(address payable addr) public payable returns (uint balance) {\r... */\n    tag_2:\n      tag_3\n      0x04\n      dup1\n      calldatasize\n      sub\n        /* \"--CODEGEN--\":13:15   */\n      0x20\n        /* \"--CODEGEN--\":8:11   */\n      dup2\n        /* \"--CODEGEN--\":5:16   */\n      lt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_4\n      jumpi\n        /* \"--CODEGEN--\":29:30   */\n      0x00\n        /* \"--CODEGEN--\":26:27   */\n      dup1\n        /* \"--CODEGEN--\":19:31   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_4:\n        /* \"contracts/22.sol\":50:705  function sendHalf(address payable addr) public payable returns (uint balance) {\r... */\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_5\n      jump\t// in\n    tag_3:\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n    tag_5:\n        /* \"contracts/22.sol\":114:126  uint balance */\n      0x00\n        /* \"contracts/22.sol\":163:164  0 */\n      dup1\n        /* \"contracts/22.sol\":158:159  2 */\n      0x02\n        /* \"contracts/22.sol\":146:155  msg.value */\n      callvalue\n        /* \"contracts/22.sol\":146:159  msg.value % 2 */\n      dup2\n      tag_7\n      jumpi\n      invalid\n    tag_7:\n      mod\n        /* \"contracts/22.sol\":146:164  msg.value % 2 == 0 */\n      eq\n        /* \"contracts/22.sol\":139:165  assert(msg.value % 2 == 0) */\n      tag_8\n      jumpi\n      invalid\n    tag_8:\n        /* \"contracts/22.sol\":224:250  uint balanceBeforeTransfer */\n      0x00\n        /* \"contracts/22.sol\":253:274  address(this).balance */\n      selfbalance\n        /* \"contracts/22.sol\":224:274  uint balanceBeforeTransfer = address(this).balance */\n      swap1\n      pop\n        /* \"contracts/22.sol\":286:298  bool success */\n      0x00\n        /* \"contracts/22.sol\":304:308  addr */\n      dup4\n        /* \"contracts/22.sol\":304:313  addr.call */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/22.sol\":332:333  2 */\n      0x02\n        /* \"contracts/22.sol\":320:329  msg.value */\n      callvalue\n        /* \"contracts/22.sol\":320:333  msg.value / 2 */\n      dup2\n      tag_9\n      jumpi\n      invalid\n    tag_9:\n      div\n        /* \"contracts/22.sol\":304:338  addr.call.value(msg.value / 2)(\"\") */\n      mload(0x40)\n      dup1\n      0x00\n      add\n      swap1\n      pop\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup6\n      dup8\n      gas\n      call\n      swap3\n      pop\n      pop\n      pop\n      returndatasize\n        /* \"--CODEGEN--\":14:15   */\n      dup1\n        /* \"--CODEGEN--\":21:22   */\n      0x00\n        /* \"--CODEGEN--\":16:47   */\n      dup2\n      eq\n      tag_11\n      jumpi\n        /* \"--CODEGEN--\":75:79   */\n      0x40\n        /* \"--CODEGEN--\":69:80   */\n      mload\n        /* \"--CODEGEN--\":64:80   */\n      swap2\n      pop\n        /* \"--CODEGEN--\":144:148   */\n      0x1f\n        /* \"--CODEGEN--\":140:149   */\n      not\n        /* \"--CODEGEN--\":133:137   */\n      0x3f\n        /* \"--CODEGEN--\":115:131   */\n      returndatasize\n        /* \"--CODEGEN--\":111:138   */\n      add\n        /* \"--CODEGEN--\":107:150   */\n      and\n        /* \"--CODEGEN--\":104:105   */\n      dup3\n        /* \"--CODEGEN--\":100:151   */\n      add\n        /* \"--CODEGEN--\":94:98   */\n      0x40\n        /* \"--CODEGEN--\":87:152   */\n      mstore\n        /* \"--CODEGEN--\":169:185   */\n      returndatasize\n        /* \"--CODEGEN--\":166:167   */\n      dup3\n        /* \"--CODEGEN--\":159:186   */\n      mstore\n        /* \"--CODEGEN--\":225:241   */\n      returndatasize\n        /* \"--CODEGEN--\":222:223   */\n      0x00\n        /* \"--CODEGEN--\":215:219   */\n      0x20\n        /* \"--CODEGEN--\":212:213   */\n      dup5\n        /* \"--CODEGEN--\":208:220   */\n      add\n        /* \"--CODEGEN--\":193:242   */\n      returndatacopy\n        /* \"--CODEGEN--\":7:249   */\n      jump(tag_10)\n        /* \"--CODEGEN--\":16:47   */\n    tag_11:\n        /* \"--CODEGEN--\":36:40   */\n      0x60\n        /* \"--CODEGEN--\":31:40   */\n      swap2\n      pop\n        /* \"--CODEGEN--\":7:249   */\n    tag_10:\n      pop\n        /* \"contracts/22.sol\":285:338  (bool success, ) = addr.call.value(msg.value / 2)(\"\") */\n      pop\n      swap1\n      pop\n        /* \"contracts/22.sol\":357:364  success */\n      dup1\n        /* \"contracts/22.sol\":349:365  require(success) */\n      tag_12\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_12:\n        /* \"contracts/22.sol\":572:573  2 */\n      0x02\n        /* \"contracts/22.sol\":560:569  msg.value */\n      callvalue\n        /* \"contracts/22.sol\":560:573  msg.value / 2 */\n      dup2\n      tag_13\n      jumpi\n      invalid\n    tag_13:\n      div\n        /* \"contracts/22.sol\":536:557  balanceBeforeTransfer */\n      dup3\n        /* \"contracts/22.sol\":536:573  balanceBeforeTransfer - msg.value / 2 */\n      sub\n        /* \"contracts/22.sol\":511:532  address(this).balance */\n      selfbalance\n        /* \"contracts/22.sol\":511:573  address(this).balance == balanceBeforeTransfer - msg.value / 2 */\n      eq\n        /* \"contracts/22.sol\":504:574  assert(address(this).balance == balanceBeforeTransfer - msg.value / 2) */\n      tag_14\n      jumpi\n      invalid\n    tag_14:\n        /* \"contracts/22.sol\":676:697  address(this).balance */\n      selfbalance\n        /* \"contracts/22.sol\":669:697  return address(this).balance */\n      swap3\n      pop\n      pop\n      pop\n        /* \"contracts/22.sol\":50:705  function sendHalf(address payable addr) public payable returns (uint balance) {\r... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n\n    auxdata: 0xa265627a7a723158203658efb3e929cb5e330aa243d0712cc1bb6f930395ac039749a1c7bfd2bc55f264736f6c63430005110032\n}\n",
						"bytecode": {
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50610166806100206000396000f3fe60806040526004361061001e5760003560e01c806375949c1314610023575b600080fd5b6100656004803603602081101561003957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061007b565b6040518082815260200191505060405180910390f35b6000806002348161008857fe5b061461009057fe5b600047905060008373ffffffffffffffffffffffffffffffffffffffff16600234816100b857fe5b0460405180600001905060006040518083038185875af1925050503d80600081146100ff576040519150601f19603f3d011682016040523d82523d6000602084013e610104565b606091505b505090508061011257600080fd5b6002348161011c57fe5b048203471461012757fe5b479250505091905056fea265627a7a723158203658efb3e929cb5e330aa243d0712cc1bb6f930395ac039749a1c7bfd2bc55f264736f6c63430005110032",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x166 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1E JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x75949C13 EQ PUSH2 0x23 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x65 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x39 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x7B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x2 CALLVALUE DUP2 PUSH2 0x88 JUMPI INVALID JUMPDEST MOD EQ PUSH2 0x90 JUMPI INVALID JUMPDEST PUSH1 0x0 SELFBALANCE SWAP1 POP PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x2 CALLVALUE DUP2 PUSH2 0xB8 JUMPI INVALID JUMPDEST DIV PUSH1 0x40 MLOAD DUP1 PUSH1 0x0 ADD SWAP1 POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xFF JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x104 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x112 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x2 CALLVALUE DUP2 PUSH2 0x11C JUMPI INVALID JUMPDEST DIV DUP3 SUB SELFBALANCE EQ PUSH2 0x127 JUMPI INVALID JUMPDEST SELFBALANCE SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 CALLDATASIZE PC 0xEF 0xB3 0xE9 0x29 0xCB 0x5E CALLER EXP LOG2 NUMBER 0xD0 PUSH18 0x2CC1BB6F930395AC039749A1C7BFD2BC55F2 PUSH5 0x736F6C6343 STOP SDIV GT STOP ORIGIN ",
							"sourceMap": "27:681:0:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;27:681:0;;;;;;;"
						},
						"deployedBytecode": {
							"linkReferences": {},
							"object": "60806040526004361061001e5760003560e01c806375949c1314610023575b600080fd5b6100656004803603602081101561003957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061007b565b6040518082815260200191505060405180910390f35b6000806002348161008857fe5b061461009057fe5b600047905060008373ffffffffffffffffffffffffffffffffffffffff16600234816100b857fe5b0460405180600001905060006040518083038185875af1925050503d80600081146100ff576040519150601f19603f3d011682016040523d82523d6000602084013e610104565b606091505b505090508061011257600080fd5b6002348161011c57fe5b048203471461012757fe5b479250505091905056fea265627a7a723158203658efb3e929cb5e330aa243d0712cc1bb6f930395ac039749a1c7bfd2bc55f264736f6c63430005110032",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1E JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x75949C13 EQ PUSH2 0x23 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x65 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x39 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x7B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x2 CALLVALUE DUP2 PUSH2 0x88 JUMPI INVALID JUMPDEST MOD EQ PUSH2 0x90 JUMPI INVALID JUMPDEST PUSH1 0x0 SELFBALANCE SWAP1 POP PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x2 CALLVALUE DUP2 PUSH2 0xB8 JUMPI INVALID JUMPDEST DIV PUSH1 0x40 MLOAD DUP1 PUSH1 0x0 ADD SWAP1 POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xFF JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x104 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x112 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x2 CALLVALUE DUP2 PUSH2 0x11C JUMPI INVALID JUMPDEST DIV DUP3 SUB SELFBALANCE EQ PUSH2 0x127 JUMPI INVALID JUMPDEST SELFBALANCE SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 CALLDATASIZE PC 0xEF 0xB3 0xE9 0x29 0xCB 0x5E CALLER EXP LOG2 NUMBER 0xD0 PUSH18 0x2CC1BB6F930395AC039749A1C7BFD2BC55F2 PUSH5 0x736F6C6343 STOP SDIV GT STOP ORIGIN ",
							"sourceMap": "27:681:0:-;;;;;;;;;;;;;;;;;;;;;50:655;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;50:655:0;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;114:12;163:1;158;146:9;:13;;;;;;:18;139:26;;;;224;253:21;224:50;;286:12;304:4;:9;;332:1;320:9;:13;;;;;;304:34;;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;285:53:0;;;357:7;349:16;;;;;;572:1;560:9;:13;;;;;;536:21;:37;511:21;:62;504:70;;;;676:21;669:28;;;;50:655;;;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "71600",
								"executionCost": "123",
								"totalCost": "71723"
							},
							"external": {
								"sendHalf(address)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 27,
									"end": 708,
									"name": "PUSH",
									"value": "80"
								},
								{
									"begin": 27,
									"end": 708,
									"name": "PUSH",
									"value": "40"
								},
								{
									"begin": 27,
									"end": 708,
									"name": "MSTORE"
								},
								{
									"begin": 27,
									"end": 708,
									"name": "CALLVALUE"
								},
								{
									"begin": 8,
									"end": 17,
									"name": "DUP1"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "ISZERO"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "PUSH [tag]",
									"value": "1"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "JUMPI"
								},
								{
									"begin": 30,
									"end": 31,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 27,
									"end": 28,
									"name": "DUP1"
								},
								{
									"begin": 20,
									"end": 32,
									"name": "REVERT"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "tag",
									"value": "1"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "JUMPDEST"
								},
								{
									"begin": 27,
									"end": 708,
									"name": "POP"
								},
								{
									"begin": 27,
									"end": 708,
									"name": "PUSH #[$]",
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 27,
									"end": 708,
									"name": "DUP1"
								},
								{
									"begin": 27,
									"end": 708,
									"name": "PUSH [$]",
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 27,
									"end": 708,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 27,
									"end": 708,
									"name": "CODECOPY"
								},
								{
									"begin": 27,
									"end": 708,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 27,
									"end": 708,
									"name": "RETURN"
								}
							],
							".data": {
								"0": {
									".auxdata": "a265627a7a723158203658efb3e929cb5e330aa243d0712cc1bb6f930395ac039749a1c7bfd2bc55f264736f6c63430005110032",
									".code": [
										{
											"begin": 27,
											"end": 708,
											"name": "PUSH",
											"value": "80"
										},
										{
											"begin": 27,
											"end": 708,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 27,
											"end": 708,
											"name": "MSTORE"
										},
										{
											"begin": 27,
											"end": 708,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 27,
											"end": 708,
											"name": "CALLDATASIZE"
										},
										{
											"begin": 27,
											"end": 708,
											"name": "LT"
										},
										{
											"begin": 27,
											"end": 708,
											"name": "PUSH [tag]",
											"value": "1"
										},
										{
											"begin": 27,
											"end": 708,
											"name": "JUMPI"
										},
										{
											"begin": 27,
											"end": 708,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 27,
											"end": 708,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 27,
											"end": 708,
											"name": "PUSH",
											"value": "E0"
										},
										{
											"begin": 27,
											"end": 708,
											"name": "SHR"
										},
										{
											"begin": 27,
											"end": 708,
											"name": "DUP1"
										},
										{
											"begin": 27,
											"end": 708,
											"name": "PUSH",
											"value": "75949C13"
										},
										{
											"begin": 27,
											"end": 708,
											"name": "EQ"
										},
										{
											"begin": 27,
											"end": 708,
											"name": "PUSH [tag]",
											"value": "2"
										},
										{
											"begin": 27,
											"end": 708,
											"name": "JUMPI"
										},
										{
											"begin": 27,
											"end": 708,
											"name": "tag",
											"value": "1"
										},
										{
											"begin": 27,
											"end": 708,
											"name": "JUMPDEST"
										},
										{
											"begin": 27,
											"end": 708,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 27,
											"end": 708,
											"name": "DUP1"
										},
										{
											"begin": 27,
											"end": 708,
											"name": "REVERT"
										},
										{
											"begin": 50,
											"end": 705,
											"name": "tag",
											"value": "2"
										},
										{
											"begin": 50,
											"end": 705,
											"name": "JUMPDEST"
										},
										{
											"begin": 50,
											"end": 705,
											"name": "PUSH [tag]",
											"value": "3"
										},
										{
											"begin": 50,
											"end": 705,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 50,
											"end": 705,
											"name": "DUP1"
										},
										{
											"begin": 50,
											"end": 705,
											"name": "CALLDATASIZE"
										},
										{
											"begin": 50,
											"end": 705,
											"name": "SUB"
										},
										{
											"begin": 13,
											"end": 15,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 8,
											"end": 11,
											"name": "DUP2"
										},
										{
											"begin": 5,
											"end": 16,
											"name": "LT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "ISZERO"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "PUSH [tag]",
											"value": "4"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPI"
										},
										{
											"begin": 29,
											"end": 30,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 26,
											"end": 27,
											"name": "DUP1"
										},
										{
											"begin": 19,
											"end": 31,
											"name": "REVERT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "tag",
											"value": "4"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPDEST"
										},
										{
											"begin": 50,
											"end": 705,
											"name": "DUP2"
										},
										{
											"begin": 50,
											"end": 705,
											"name": "ADD"
										},
										{
											"begin": 50,
											"end": 705,
											"name": "SWAP1"
										},
										{
											"begin": 50,
											"end": 705,
											"name": "DUP1"
										},
										{
											"begin": 50,
											"end": 705,
											"name": "DUP1"
										},
										{
											"begin": 50,
											"end": 705,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 50,
											"end": 705,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 50,
											"end": 705,
											"name": "AND"
										},
										{
											"begin": 50,
											"end": 705,
											"name": "SWAP1"
										},
										{
											"begin": 50,
											"end": 705,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 50,
											"end": 705,
											"name": "ADD"
										},
										{
											"begin": 50,
											"end": 705,
											"name": "SWAP1"
										},
										{
											"begin": 50,
											"end": 705,
											"name": "SWAP3"
										},
										{
											"begin": 50,
											"end": 705,
											"name": "SWAP2"
										},
										{
											"begin": 50,
											"end": 705,
											"name": "SWAP1"
										},
										{
											"begin": 50,
											"end": 705,
											"name": "POP"
										},
										{
											"begin": 50,
											"end": 705,
											"name": "POP"
										},
										{
											"begin": 50,
											"end": 705,
											"name": "POP"
										},
										{
											"begin": 50,
											"end": 705,
											"name": "PUSH [tag]",
											"value": "5"
										},
										{
											"begin": 50,
											"end": 705,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 50,
											"end": 705,
											"name": "tag",
											"value": "3"
										},
										{
											"begin": 50,
											"end": 705,
											"name": "JUMPDEST"
										},
										{
											"begin": 50,
											"end": 705,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 50,
											"end": 705,
											"name": "MLOAD"
										},
										{
											"begin": 50,
											"end": 705,
											"name": "DUP1"
										},
										{
											"begin": 50,
											"end": 705,
											"name": "DUP3"
										},
										{
											"begin": 50,
											"end": 705,
											"name": "DUP2"
										},
										{
											"begin": 50,
											"end": 705,
											"name": "MSTORE"
										},
										{
											"begin": 50,
											"end": 705,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 50,
											"end": 705,
											"name": "ADD"
										},
										{
											"begin": 50,
											"end": 705,
											"name": "SWAP2"
										},
										{
											"begin": 50,
											"end": 705,
											"name": "POP"
										},
										{
											"begin": 50,
											"end": 705,
											"name": "POP"
										},
										{
											"begin": 50,
											"end": 705,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 50,
											"end": 705,
											"name": "MLOAD"
										},
										{
											"begin": 50,
											"end": 705,
											"name": "DUP1"
										},
										{
											"begin": 50,
											"end": 705,
											"name": "SWAP2"
										},
										{
											"begin": 50,
											"end": 705,
											"name": "SUB"
										},
										{
											"begin": 50,
											"end": 705,
											"name": "SWAP1"
										},
										{
											"begin": 50,
											"end": 705,
											"name": "RETURN"
										},
										{
											"begin": 50,
											"end": 705,
											"name": "tag",
											"value": "5"
										},
										{
											"begin": 50,
											"end": 705,
											"name": "JUMPDEST"
										},
										{
											"begin": 114,
											"end": 126,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 163,
											"end": 164,
											"name": "DUP1"
										},
										{
											"begin": 158,
											"end": 159,
											"name": "PUSH",
											"value": "2"
										},
										{
											"begin": 146,
											"end": 155,
											"name": "CALLVALUE"
										},
										{
											"begin": 146,
											"end": 159,
											"name": "DUP2"
										},
										{
											"begin": 146,
											"end": 159,
											"name": "PUSH [tag]",
											"value": "7"
										},
										{
											"begin": 146,
											"end": 159,
											"name": "JUMPI"
										},
										{
											"begin": 146,
											"end": 159,
											"name": "INVALID"
										},
										{
											"begin": 146,
											"end": 159,
											"name": "tag",
											"value": "7"
										},
										{
											"begin": 146,
											"end": 159,
											"name": "JUMPDEST"
										},
										{
											"begin": 146,
											"end": 159,
											"name": "MOD"
										},
										{
											"begin": 146,
											"end": 164,
											"name": "EQ"
										},
										{
											"begin": 139,
											"end": 165,
											"name": "PUSH [tag]",
											"value": "8"
										},
										{
											"begin": 139,
											"end": 165,
											"name": "JUMPI"
										},
										{
											"begin": 139,
											"end": 165,
											"name": "INVALID"
										},
										{
											"begin": 139,
											"end": 165,
											"name": "tag",
											"value": "8"
										},
										{
											"begin": 139,
											"end": 165,
											"name": "JUMPDEST"
										},
										{
											"begin": 224,
											"end": 250,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 253,
											"end": 274,
											"name": "SELFBALANCE"
										},
										{
											"begin": 224,
											"end": 274,
											"name": "SWAP1"
										},
										{
											"begin": 224,
											"end": 274,
											"name": "POP"
										},
										{
											"begin": 286,
											"end": 298,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 304,
											"end": 308,
											"name": "DUP4"
										},
										{
											"begin": 304,
											"end": 313,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 304,
											"end": 313,
											"name": "AND"
										},
										{
											"begin": 332,
											"end": 333,
											"name": "PUSH",
											"value": "2"
										},
										{
											"begin": 320,
											"end": 329,
											"name": "CALLVALUE"
										},
										{
											"begin": 320,
											"end": 333,
											"name": "DUP2"
										},
										{
											"begin": 320,
											"end": 333,
											"name": "PUSH [tag]",
											"value": "9"
										},
										{
											"begin": 320,
											"end": 333,
											"name": "JUMPI"
										},
										{
											"begin": 320,
											"end": 333,
											"name": "INVALID"
										},
										{
											"begin": 320,
											"end": 333,
											"name": "tag",
											"value": "9"
										},
										{
											"begin": 320,
											"end": 333,
											"name": "JUMPDEST"
										},
										{
											"begin": 320,
											"end": 333,
											"name": "DIV"
										},
										{
											"begin": 304,
											"end": 338,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 304,
											"end": 338,
											"name": "MLOAD"
										},
										{
											"begin": 304,
											"end": 338,
											"name": "DUP1"
										},
										{
											"begin": 304,
											"end": 338,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 304,
											"end": 338,
											"name": "ADD"
										},
										{
											"begin": 304,
											"end": 338,
											"name": "SWAP1"
										},
										{
											"begin": 304,
											"end": 338,
											"name": "POP"
										},
										{
											"begin": 304,
											"end": 338,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 304,
											"end": 338,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 304,
											"end": 338,
											"name": "MLOAD"
										},
										{
											"begin": 304,
											"end": 338,
											"name": "DUP1"
										},
										{
											"begin": 304,
											"end": 338,
											"name": "DUP4"
										},
										{
											"begin": 304,
											"end": 338,
											"name": "SUB"
										},
										{
											"begin": 304,
											"end": 338,
											"name": "DUP2"
										},
										{
											"begin": 304,
											"end": 338,
											"name": "DUP6"
										},
										{
											"begin": 304,
											"end": 338,
											"name": "DUP8"
										},
										{
											"begin": 304,
											"end": 338,
											"name": "GAS"
										},
										{
											"begin": 304,
											"end": 338,
											"name": "CALL"
										},
										{
											"begin": 304,
											"end": 338,
											"name": "SWAP3"
										},
										{
											"begin": 304,
											"end": 338,
											"name": "POP"
										},
										{
											"begin": 304,
											"end": 338,
											"name": "POP"
										},
										{
											"begin": 304,
											"end": 338,
											"name": "POP"
										},
										{
											"begin": 304,
											"end": 338,
											"name": "RETURNDATASIZE"
										},
										{
											"begin": 14,
											"end": 15,
											"name": "DUP1"
										},
										{
											"begin": 21,
											"end": 22,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 16,
											"end": 47,
											"name": "DUP2"
										},
										{
											"begin": 16,
											"end": 47,
											"name": "EQ"
										},
										{
											"begin": 16,
											"end": 47,
											"name": "PUSH [tag]",
											"value": "11"
										},
										{
											"begin": 16,
											"end": 47,
											"name": "JUMPI"
										},
										{
											"begin": 75,
											"end": 79,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 69,
											"end": 80,
											"name": "MLOAD"
										},
										{
											"begin": 64,
											"end": 80,
											"name": "SWAP2"
										},
										{
											"begin": 64,
											"end": 80,
											"name": "POP"
										},
										{
											"begin": 144,
											"end": 148,
											"name": "PUSH",
											"value": "1F"
										},
										{
											"begin": 140,
											"end": 149,
											"name": "NOT"
										},
										{
											"begin": 133,
											"end": 137,
											"name": "PUSH",
											"value": "3F"
										},
										{
											"begin": 115,
											"end": 131,
											"name": "RETURNDATASIZE"
										},
										{
											"begin": 111,
											"end": 138,
											"name": "ADD"
										},
										{
											"begin": 107,
											"end": 150,
											"name": "AND"
										},
										{
											"begin": 104,
											"end": 105,
											"name": "DUP3"
										},
										{
											"begin": 100,
											"end": 151,
											"name": "ADD"
										},
										{
											"begin": 94,
											"end": 98,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 87,
											"end": 152,
											"name": "MSTORE"
										},
										{
											"begin": 169,
											"end": 185,
											"name": "RETURNDATASIZE"
										},
										{
											"begin": 166,
											"end": 167,
											"name": "DUP3"
										},
										{
											"begin": 159,
											"end": 186,
											"name": "MSTORE"
										},
										{
											"begin": 225,
											"end": 241,
											"name": "RETURNDATASIZE"
										},
										{
											"begin": 222,
											"end": 223,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 215,
											"end": 219,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 212,
											"end": 213,
											"name": "DUP5"
										},
										{
											"begin": 208,
											"end": 220,
											"name": "ADD"
										},
										{
											"begin": 193,
											"end": 242,
											"name": "RETURNDATACOPY"
										},
										{
											"begin": 7,
											"end": 249,
											"name": "PUSH [tag]",
											"value": "10"
										},
										{
											"begin": 7,
											"end": 249,
											"name": "JUMP"
										},
										{
											"begin": 16,
											"end": 47,
											"name": "tag",
											"value": "11"
										},
										{
											"begin": 16,
											"end": 47,
											"name": "JUMPDEST"
										},
										{
											"begin": 36,
											"end": 40,
											"name": "PUSH",
											"value": "60"
										},
										{
											"begin": 31,
											"end": 40,
											"name": "SWAP2"
										},
										{
											"begin": 31,
											"end": 40,
											"name": "POP"
										},
										{
											"begin": 7,
											"end": 249,
											"name": "tag",
											"value": "10"
										},
										{
											"begin": 7,
											"end": 249,
											"name": "JUMPDEST"
										},
										{
											"begin": 7,
											"end": 249,
											"name": "POP"
										},
										{
											"begin": 285,
											"end": 338,
											"name": "POP"
										},
										{
											"begin": 285,
											"end": 338,
											"name": "SWAP1"
										},
										{
											"begin": 285,
											"end": 338,
											"name": "POP"
										},
										{
											"begin": 357,
											"end": 364,
											"name": "DUP1"
										},
										{
											"begin": 349,
											"end": 365,
											"name": "PUSH [tag]",
											"value": "12"
										},
										{
											"begin": 349,
											"end": 365,
											"name": "JUMPI"
										},
										{
											"begin": 349,
											"end": 365,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 349,
											"end": 365,
											"name": "DUP1"
										},
										{
											"begin": 349,
											"end": 365,
											"name": "REVERT"
										},
										{
											"begin": 349,
											"end": 365,
											"name": "tag",
											"value": "12"
										},
										{
											"begin": 349,
											"end": 365,
											"name": "JUMPDEST"
										},
										{
											"begin": 572,
											"end": 573,
											"name": "PUSH",
											"value": "2"
										},
										{
											"begin": 560,
											"end": 569,
											"name": "CALLVALUE"
										},
										{
											"begin": 560,
											"end": 573,
											"name": "DUP2"
										},
										{
											"begin": 560,
											"end": 573,
											"name": "PUSH [tag]",
											"value": "13"
										},
										{
											"begin": 560,
											"end": 573,
											"name": "JUMPI"
										},
										{
											"begin": 560,
											"end": 573,
											"name": "INVALID"
										},
										{
											"begin": 560,
											"end": 573,
											"name": "tag",
											"value": "13"
										},
										{
											"begin": 560,
											"end": 573,
											"name": "JUMPDEST"
										},
										{
											"begin": 560,
											"end": 573,
											"name": "DIV"
										},
										{
											"begin": 536,
											"end": 557,
											"name": "DUP3"
										},
										{
											"begin": 536,
											"end": 573,
											"name": "SUB"
										},
										{
											"begin": 511,
											"end": 532,
											"name": "SELFBALANCE"
										},
										{
											"begin": 511,
											"end": 573,
											"name": "EQ"
										},
										{
											"begin": 504,
											"end": 574,
											"name": "PUSH [tag]",
											"value": "14"
										},
										{
											"begin": 504,
											"end": 574,
											"name": "JUMPI"
										},
										{
											"begin": 504,
											"end": 574,
											"name": "INVALID"
										},
										{
											"begin": 504,
											"end": 574,
											"name": "tag",
											"value": "14"
										},
										{
											"begin": 504,
											"end": 574,
											"name": "JUMPDEST"
										},
										{
											"begin": 676,
											"end": 697,
											"name": "SELFBALANCE"
										},
										{
											"begin": 669,
											"end": 697,
											"name": "SWAP3"
										},
										{
											"begin": 669,
											"end": 697,
											"name": "POP"
										},
										{
											"begin": 669,
											"end": 697,
											"name": "POP"
										},
										{
											"begin": 669,
											"end": 697,
											"name": "POP"
										},
										{
											"begin": 50,
											"end": 705,
											"name": "SWAP2"
										},
										{
											"begin": 50,
											"end": 705,
											"name": "SWAP1"
										},
										{
											"begin": 50,
											"end": 705,
											"name": "POP"
										},
										{
											"begin": 50,
											"end": 705,
											"name": "JUMP",
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"sendHalf(address)": "75949c13"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"sendHalf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/22.sol\":\"Sharer\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/22.sol\":{\"keccak256\":\"0x0c01d9dcf51022ddd596078371dc4e1ab04e4da367b692fa0a0fd2289c9c218b\",\"urls\":[\"bzz-raw://fed119b0066c9d7aa3a08af4ca3610a21ca9c1f4818cdee6f1db44105f5abba5\",\"dweb:/ipfs/QmUW1TkqotgZy93w1LLHN5YwB569g38oXaCEzrPhX77Zrn\"]}},\"version\":1}",
					"userdoc": {
						"methods": {}
					}
				}
			}
		},
		"sources": {
			"contracts/22.sol": {
				"ast": {
					"absolutePath": "contracts/22.sol",
					"exportedSymbols": {
						"Sharer": [
							62
						]
					},
					"id": 63,
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "0:23:0"
						},
						{
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": null,
							"fullyImplemented": true,
							"id": 62,
							"linearizedBaseContracts": [
								62
							],
							"name": "Sharer",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 60,
										"nodeType": "Block",
										"src": "128:577:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 14,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 12,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"argumentTypes": null,
																	"expression": {
																		"argumentTypes": null,
																		"id": 9,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 77,
																		"src": "146:3:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 10,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "value",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": null,
																	"src": "146:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "%",
																"rightExpression": {
																	"argumentTypes": null,
																	"hexValue": "32",
																	"id": 11,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "158:1:0",
																	"subdenomination": null,
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"src": "146:13:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"argumentTypes": null,
																"hexValue": "30",
																"id": 13,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "163:1:0",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "146:18:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 8,
														"name": "assert",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 66,
														"src": "139:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 15,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "139:26:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 16,
												"nodeType": "ExpressionStatement",
												"src": "139:26:0"
											},
											{
												"assignments": [
													18
												],
												"declarations": [
													{
														"constant": false,
														"id": 18,
														"name": "balanceBeforeTransfer",
														"nodeType": "VariableDeclaration",
														"scope": 60,
														"src": "224:26:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 17,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "224:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 23,
												"initialValue": {
													"argumentTypes": null,
													"expression": {
														"argumentTypes": null,
														"arguments": [
															{
																"argumentTypes": null,
																"id": 20,
																"name": "this",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 91,
																"src": "261:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_Sharer_$62",
																	"typeString": "contract Sharer"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_contract$_Sharer_$62",
																	"typeString": "contract Sharer"
																}
															],
															"id": 19,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "253:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": "address"
														},
														"id": 21,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "253:13:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 22,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "balance",
													"nodeType": "MemberAccess",
													"referencedDeclaration": null,
													"src": "253:21:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "224:50:0"
											},
											{
												"assignments": [
													25,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 25,
														"name": "success",
														"nodeType": "VariableDeclaration",
														"scope": 60,
														"src": "286:12:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 24,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "286:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"value": null,
														"visibility": "internal"
													},
													null
												],
												"id": 36,
												"initialValue": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"hexValue": "",
															"id": 34,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "335:2:0",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"arguments": [
															{
																"argumentTypes": null,
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 32,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"argumentTypes": null,
																	"expression": {
																		"argumentTypes": null,
																		"id": 29,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 77,
																		"src": "320:3:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 30,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "value",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": null,
																	"src": "320:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"argumentTypes": null,
																	"hexValue": "32",
																	"id": 31,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "332:1:0",
																	"subdenomination": null,
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"src": "320:13:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"argumentTypes": null,
																"expression": {
																	"argumentTypes": null,
																	"id": 26,
																	"name": "addr",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3,
																	"src": "304:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address_payable",
																		"typeString": "address payable"
																	}
																},
																"id": 27,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "call",
																"nodeType": "MemberAccess",
																"referencedDeclaration": null,
																"src": "304:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
																}
															},
															"id": 28,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "value",
															"nodeType": "MemberAccess",
															"referencedDeclaration": null,
															"src": "304:15:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_setvalue_pure$_t_uint256_$returns$_t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value_$",
																"typeString": "function (uint256) pure returns (function (bytes memory) payable returns (bool,bytes memory))"
															}
														},
														"id": 33,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "304:30:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 35,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "304:34:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "285:53:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 38,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 25,
															"src": "357:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 37,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															80,
															81
														],
														"referencedDeclaration": 80,
														"src": "349:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 39,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "349:16:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 40,
												"nodeType": "ExpressionStatement",
												"src": "349:16:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 52,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"expression": {
																	"argumentTypes": null,
																	"arguments": [
																		{
																			"argumentTypes": null,
																			"id": 43,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 91,
																			"src": "519:4:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Sharer_$62",
																				"typeString": "contract Sharer"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Sharer_$62",
																				"typeString": "contract Sharer"
																			}
																		],
																		"id": 42,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "511:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": "address"
																	},
																	"id": 44,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "511:13:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 45,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": null,
																"src": "511:21:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"argumentTypes": null,
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 51,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"argumentTypes": null,
																	"id": 46,
																	"name": "balanceBeforeTransfer",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 18,
																	"src": "536:21:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"argumentTypes": null,
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 50,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"argumentTypes": null,
																		"expression": {
																			"argumentTypes": null,
																			"id": 47,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 77,
																			"src": "560:3:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 48,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "value",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": null,
																		"src": "560:9:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"argumentTypes": null,
																		"hexValue": "32",
																		"id": 49,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "572:1:0",
																		"subdenomination": null,
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_2_by_1",
																			"typeString": "int_const 2"
																		},
																		"value": "2"
																	},
																	"src": "560:13:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "536:37:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "511:62:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 41,
														"name": "assert",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 66,
														"src": "504:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 53,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "504:70:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 54,
												"nodeType": "ExpressionStatement",
												"src": "504:70:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"expression": {
														"argumentTypes": null,
														"arguments": [
															{
																"argumentTypes": null,
																"id": 56,
																"name": "this",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 91,
																"src": "684:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_Sharer_$62",
																	"typeString": "contract Sharer"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_contract$_Sharer_$62",
																	"typeString": "contract Sharer"
																}
															],
															"id": 55,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "676:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": "address"
														},
														"id": 57,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "676:13:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 58,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "balance",
													"nodeType": "MemberAccess",
													"referencedDeclaration": null,
													"src": "676:21:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 7,
												"id": 59,
												"nodeType": "Return",
												"src": "669:28:0"
											}
										]
									},
									"documentation": null,
									"id": 61,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sendHalf",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 4,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3,
												"name": "addr",
												"nodeType": "VariableDeclaration",
												"scope": 61,
												"src": "68:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 2,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "68:15:0",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "67:22:0"
									},
									"returnParameters": {
										"id": 7,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 6,
												"name": "balance",
												"nodeType": "VariableDeclaration",
												"scope": 61,
												"src": "114:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 5,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "114:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "113:14:0"
									},
									"scope": 62,
									"src": "50:655:0",
									"stateMutability": "payable",
									"superFunction": null,
									"visibility": "public"
								}
							],
							"scope": 63,
							"src": "27:681:0"
						}
					],
					"src": "0:708:0"
				},
				"id": 0
			}
		}
	}
}